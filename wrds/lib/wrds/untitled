require 'highline/import'
require 'apicake'
require 'json'




# class R

# 	def initialize(**args)
# 	  @e = {}
# 	  @e[:a] = ask("which: ")
# 	  @e[:b] = ask("why: ")
# 	  @e[:c] = ask("where: ")
# 	end
# end 


require 'highline/import'
require 'apicake'
require 'httparty'
require 'json'

class CLI

  def initialize()
  end

  def start
    Display.instructions
  end


  def 
    @response = Request.endpoint(Collect.new.parameters)
    

    # @response = Request.endpoint(@params)
    #@results = Words.new(@response)
    # Display.word(@results)

  end
end

class Combine
  def self.words(**args)
    @response = JSON.parse(Request.endpoint Collect.new.parameters
  end 
end


class API < APICake::Base
  base_uri 'api.datamuse.com' 
end

class Request
  def self.create
    @parameters = Collect.new.parameters
    Request.endpoint
  end

  def self.endpoint(@parameters)
    api = API.new
    api.words parameters
  end
end

MODS = {
    means_like: :ml, sounds_like: :sl, spelled_like: :sp, 
    related_popular_nouns: :rel_jja, related_popular_adjectives: :rel_jjb, 
    related_synonyms: :rel_syn, related_triggers: :rel_trg,
    related_antonyms: :rel_ant, kind_of_hyponyms: :rel_spc, general_hyponyms: :rel_gen,
    comporomise_hyponyms: :rel_com, part_of_meronyms: :rel_par, 
    frequent_followers: :rel_bga, frequent_predecessors: :rel_bgb, 
    related_rhymes: :rel_rhy, approximate_rhymes: :rel_nry,
    related_homophones: :rel_hom,consonant_match: :rel_cns
}

class Collect
  attr_accessor :modifier, :word, :parameters

  def initialize(**args)
    @modifier = modifier
    @word = word
    @parameters = parameters
  end

  def modifier
    mod = ask("what modifier? ")
    mod = mod.to_sym
    modifier = MODS[mod] 
  end

  def word
    mod = ask("what word? ")
    mod = mod.to_sym
    word = mod
  end

  def parameters
    parameters = {:"#{@modifier}" => '"#{@word}"'}
  end




end


class Word < OpenStruct
end

class Words
  attr_accessor :results
  def initialize(response)
    @results = @response.map{|r|Word.new(r)}
  end
end


class Display
  attr_accessor :results
  attr_reader :instructions
  def initialize(results)
    @results = results
    @instruction = instructions
  end

  def self.word
      puts  @word[:word]
      puts  @word[:score]
      puts  @word[:tags]
  end

  def self.instructions
      puts %( 
  wrds: find words
  --------------------------
  In order to find words that...
    -- sound_like [apples],
    -- are spelled_like [monkey], or
    -- are similar_to [table]...
    ...one must choose a modifier, then select a word. 
  --------------------------)
  end



end



class CLI 
  def call
  	Display.intro
  	Display.list("Constraints")
  	Display.list(MODS.keys.each{|k| })
  	Gather.parameters
  end
end





module Display
	def self.list(list)
		puts "#{list}"
	end

	def self.intro
		puts %(
		wrds: find words
		---------------------
		use this app to find words based upon certain constraints.
		For example: to find words that [sound_like] [pig] 
		or to find words that [relatively_rhyme] with [nachos]
		So you'll choose your constraint, then choose the word.
		)
	end

end




MODS = {
    means_like: :ml, 
    sounds_like: :sl, 
    spelled_like: :sp, 
    related_popular_nouns: :rel_jja, 
    related_popular_adjectives: :rel_jjb, 
    related_synonyms: :rel_syn, 
    related_triggers: :rel_trg,
    related_antonyms: :rel_ant, 
    kind_of_hyponyms: :rel_spc, 
    general_hyponyms: :rel_gen,
    comporomise_hyponyms: :rel_com, 
    part_of_meronyms: :rel_par, 
    frequent_followers: :rel_bga, 
	frequent_predecessors: :rel_bgb, 
    related_rhymes: :rel_rhy, 
    approximate_rhymes: :rel_nry,
    related_homophones: :rel_hom,
    consonant_match: :rel_cns
}




module Gather
	tosym =->(mod){mod.to_s.to_sym}

	def self.parameters
	  	modifier = ask("which modifier? "){tosym.call(modifier)}
	  	@words = ask("which word? "){tosym.call(words)}}
	  	@mods = MODS[:"#{modifier}"]
	  	@parameters = {@mods => @words}
	end

	def self.direction
 	choose do |menu|
 		menu.prompt = "what would you like to do? "
 		menu.layout = :one_line
 		menu.choice(:search_from_results, "search using a word from results") {puts 'results'}
 		menu.choice(:start_over, "search again") {CLI.new.start}
 		menu.choice(:quit, "Exit Program") {exit}
 	end
 end
end


class Datamuse < APICake::Base
	base_uri 'api.datamuse.com'
end



class Request
	attr_accessor :word_list, :word
	def initialize
		@api = Datamuse.new
		@params = Gather.parameters
	end

	def response
		word_list = {}
		word_list = @api.words @params
		@word_list["results"].each do |word|
			Word.new_from_json(word)
	end
end

class Word
	def self.new_from_json(word_info)
		self.new(
			word_info['word'],
			word_info['score'],
			word_info['tag']
			)
	end
	def initialize(word=nil, score=nil, tag=nil)
		@word = word
		@score = score
		@tag = tag
		@@all << self
	end
	def self.all
		@@all
	end
	def self.find(word)
		self.all[word-1]
	end
	def score
		@score
	end
	def tag
		@tag
	end
end






